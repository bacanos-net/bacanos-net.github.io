// Arquivo: corrigir_json.js

const fs = require('fs');

// Pega os nomes dos arquivos a partir dos comandos no terminal
const arquivoDeEntrada = process.argv[2];
const arquivoDeSaida = process.argv[3];

if (!arquivoDeEntrada || !arquivoDeSaida) {
    console.error("\nERRO: Você precisa informar o arquivo de entrada e o de saída.");
    console.error("Uso correto: node corrigir_json.js <arquivo_quebrado.json> <arquivo_corrigido.json>\n");
    process.exit(1);
}

console.log(`Lendo o arquivo quebrado: ${arquivoDeEntrada}...`);
const conteudoQuebrado = fs.readFileSync(arquivoDeEntrada, 'utf-8');

/**
 * Esta função foi criada para entender o formato de texto específico
 * dos seus arquivos e converter para um objeto JavaScript.
 */
function parseFormatoCustomizado(texto) {
    const resultado = { name: "", downloads: [] };
    const linhas = texto.split(/\r?\n/);

    let downloadAtual = null;
    let esperandoUris = false;

    for (const linha of linhas) {
        const linhaTrim = linha.trim();
        if (!linhaTrim) continue;

        if (linhaTrim.startsWith('name\t')) {
            resultado.name = linhaTrim.split('\t')[1].replace(/"/g, '');
        } else if (linhaTrim === 'downloads') {
            continue;
        } else if (/^\d+$/.test(linhaTrim) && linha.indexOf('\t') === -1) {
            if (downloadAtual) {
                resultado.downloads.push(downloadAtual);
            }
            downloadAtual = {};
            esperandoUris = false;
        } else if (linhaTrim === 'uris') {
            esperandoUris = true;
            if (downloadAtual) {
                downloadAtual.uris = [];
            }
        } else {
            const partes = linhaTrim.split('\t');
            const chave = partes[0];
            const valor = partes.slice(1).join('\t').replace(/"/g, '');

            if (downloadAtual) {
                if (esperandoUris && /^\d+$/.test(chave)) {
                    downloadAtual.uris.push(valor);
                } else {
                    esperandoUris = false;
                    downloadAtual[chave] = valor;
                }
            }
        }
    }
    if (downloadAtual) {
        resultado.downloads.push(downloadAtual);
    }
    return resultado;
}

console.log("Convertendo o formato... Isso pode levar um momento se o arquivo for grande.");
const dadosCorrigidos = parseFormatoCustomizado(conteudoQuebrado);

fs.writeFileSync(arquivoDeSaida, JSON.stringify(dadosCorrigidos, null, 2));

console.log(`\nSucesso! ✨ O arquivo corrigido foi salvo como: ${arquivoDeSaida}`);